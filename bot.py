"""Telegram-–±–æ—Ç –¥–ª—è –ø–æ—à—É–∫—É —Ñ—ñ–ª—å–º—ñ–≤ –∑–∞ –Ω–∞–∑–≤–æ—é, –∂–∞–Ω—Ä–æ–º —á–∏ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º"""

import os
from typing import Dict
from urllib.parse import quote
import requests
import telebot
from telebot import types
from telebot.types import Message, ReplyKeyboardMarkup
from dotenv import load_dotenv

load_dotenv()

API_TOKEN: str = os.getenv('TELEGRAM_BOT_TOKEN')
OMDB_API_KEY: str = os.getenv('OMDB_API_KEY')

bot = telebot.TeleBot(API_TOKEN)
user_languages: Dict[int, str] = {}


def get_user_first_name(message: Message) -> str:
    """–ü–æ–≤–µ—Ä—Ç–∞—î —ñ–º‚Äô—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∞–±–æ '–¥—Ä—É–≥', —è–∫—â–æ –≤–æ–Ω–æ –≤—ñ–¥—Å—É—Ç–Ω—î."""
    return message.from_user.first_name if message.from_user.first_name else "–¥—Ä—É–≥"


def start_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –∫–Ω–æ–ø–∫–æ—é /help."""
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    help_button = types.KeyboardButton('/help')
    keyboard.add(help_button)
    return keyboard


def language_keyboard() -> ReplyKeyboardMarkup:
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É –º–æ–≤–∏."""
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    english_button = types.KeyboardButton('/lang_en')
    ukrainian_button = types.KeyboardButton('/lang_uk')
    keyboard.add(english_button, ukrainian_button)
    return keyboard


@bot.message_handler(commands=['start'])
def send_welcome(message: Message) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /start."""
    user_name = get_user_first_name(message)
    user_languages.setdefault(message.from_user.id, 'uk')
    keyboard = start_keyboard()
    bot.reply_to(message, f"–ü—Ä–∏–≤—ñ—Ç, {user_name}!\n"
                          f"–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–≥–∏.", reply_markup=keyboard)


@bot.message_handler(commands=['help'])
def send_help(message: Message) -> None:
    """–û–±—Ä–æ–±–ª—è—î –∫–æ–º–∞–Ω–¥—É /help."""
    language = user_languages.get(message.from_user.id, 'uk')
    if language == 'uk':
        help_text = (
            "–î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
            "/start - –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —ñ –æ—Å–Ω–æ–≤–Ω—ñ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó\n"
            "/find <–Ω–∞–∑–≤–∞ —Ñ—ñ–ª—å–º—É> - –ó–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º –∑–∞ –Ω–∞–∑–≤–æ—é\n"
            "/search <–∫–ª—é—á–æ–≤–µ —Å–ª–æ–≤–æ> - –ó–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º–∏ –∑–∞ –∫–ª—é—á–æ–≤–∏–º–∏ —Å–ª–æ–≤–∞–º–∏\n"
            "/genre <–∂–∞–Ω—Ä> - –ó–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º–∏ –∑–∞ –∂–∞–Ω—Ä–æ–º\n"
            "/lang_en - –í–∏–±—Ä–∞—Ç–∏ –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É"
        )
    else:
        help_text = (
            "Available commands:\n"
            "/start - Greeting and basic instructions\n"
            "/find <movie title> - Find a movie by title\n"
            "/search <keyword> - Find movies by keyword\n"
            "/genre <genre> - Find movies by genre\n"
            "/lang_uk - Switch to Ukrainian language"
        )
    bot.reply_to(message, help_text)


@bot.message_handler(commands=['find'])
def find_movie(message: Message) -> None:
    """–ó–Ω–∞—Ö–æ–¥–∏—Ç—å —Ñ—ñ–ª—å–º –∑–∞ –Ω–∞–∑–≤–æ—é."""
    user_name = get_user_first_name(message)
    language = user_languages.get(message.from_user.id, 'uk')
    try:
        search_query = message.text.split(' ', 1)[1]
    except IndexError:
        msg = (f"–ë—É–¥—å –ª–∞—Å–∫–∞, {user_name}, –Ω–∞–¥–∞–π—Ç–µ –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏ /find."
               if language == 'uk' else
               f"Please provide the movie title after the /find command, {user_name}.")
        bot.reply_to(message, msg)
        return

    encoded_query = quote(search_query)
    url = f'http://www.omdbapi.com/?t={encoded_query}&apikey={OMDB_API_KEY}'
    response = requests.get(url, timeout=5)
    data = response.json()

    if data.get('Response') == 'True':
        title = data.get('Title')
        year = data.get('Year')
        rating = data.get('imdbRating')
        director = data.get('Director')
        actors = data.get('Actors')
        genre = data.get('Genre')
        overview = data.get('Plot')
        poster = data.get('Poster')
        trailer_url = f"https://www.youtube.com/results?search_query={title}+trailer"

        response_message = (
            f"üé¨ –ù–∞–∑–≤–∞: {title}\n"
            f"üìÖ –†—ñ–∫: {year}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ IMDb: {rating}\n"
            f"üé• –†–µ–∂–∏—Å–µ—Ä: {director}\n"
            f"üé≠ –ê–∫—Ç–æ—Ä–∏: {actors}\n"
            f"üìö –ñ–∞–Ω—Ä: {genre}\n"
            f"üìù –û–ø–∏—Å: {overview}\n"
            f"‚ñ∂Ô∏è –¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: {trailer_url}"
        )
        if poster != 'N/A':
            bot.send_photo(message.chat.id, poster, caption=response_message)
        else:
            bot.reply_to(message, response_message)
    else:
        bot.reply_to(message, f"–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, {user_name}."
        if language == 'uk' else f"Movie not found, {user_name}.")


@bot.message_handler(commands=['lang_en'])
def set_language_english(message: Message) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∞–Ω–≥–ª—ñ–π—Å—å–∫—É –º–æ–≤—É."""
    user_languages[message.from_user.id] = 'en'
    bot.reply_to(message, "Language set to English.")


@bot.message_handler(commands=['lang_uk'])
def set_language_ukrainian(message: Message) -> None:
    """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —É–∫—Ä–∞—ó–Ω—Å—å–∫—É –º–æ–≤—É."""
    user_languages[message.from_user.id] = 'uk'
    bot.reply_to(message, "–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É.")


if __name__ == '__main__':
    bot.polling(none_stop=True)
